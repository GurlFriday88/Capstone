// <auto-generated />
using Capstone.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Capstone.Migrations
{
    [DbContext(typeof(CapstoneDBContext))]
    [Migration("20180521033729_Initial entity models")]
    partial class Initialentitymodels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Capstone.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Capstone.Models.MemoOption", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("MemoOptions");
                });

            modelBuilder.Entity("Capstone.Models.Patient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Exam");

                    b.Property<string>("Frames");

                    b.Property<string>("Lenses");

                    b.Property<int?>("ProviderNoteID");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ProviderNoteID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Capstone.Models.Prefix", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("ProviderID");

                    b.HasKey("ID");

                    b.HasIndex("ProviderID");

                    b.ToTable("Prefixes");
                });

            modelBuilder.Entity("Capstone.Models.Provider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthNote");

                    b.Property<string>("BenefitRenewal");

                    b.Property<int?>("ContactID");

                    b.Property<string>("MiscNotes");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PagesToSave");

                    b.Property<string>("SavedPagesDescription");

                    b.Property<string>("SubscriberNumber");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Capstone.Models.ProviderNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ProviderID");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("ProviderID");

                    b.ToTable("ProviderNotes");
                });

            modelBuilder.Entity("Capstone.Models.Store", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContactID");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("Capstone.Models.Patient", b =>
                {
                    b.HasOne("Capstone.Models.ProviderNote", "ProviderNote")
                        .WithMany("Patients")
                        .HasForeignKey("ProviderNoteID");
                });

            modelBuilder.Entity("Capstone.Models.Prefix", b =>
                {
                    b.HasOne("Capstone.Models.Provider", "Provider")
                        .WithMany("Prefixes")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Capstone.Models.Provider", b =>
                {
                    b.HasOne("Capstone.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");
                });

            modelBuilder.Entity("Capstone.Models.ProviderNote", b =>
                {
                    b.HasOne("Capstone.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");

                    b.HasOne("Capstone.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderID");
                });

            modelBuilder.Entity("Capstone.Models.Store", b =>
                {
                    b.HasOne("Capstone.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID");
                });
#pragma warning restore 612, 618
        }
    }
}
